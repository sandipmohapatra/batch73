Hibernate
-------------------------
1) Hibernate is a object Relational Mapping tool.
2) Hibernate is used to store the objects in a database where as JDBC store primitive types in a database.
3) It provides connection pooling.
4) It provides two types of caching.
5) We do not need to write most of the sql scripts for insert, delete object and selecting the result set.
6) Hibernate is database independent code will work for oracle, MySql, SqlServer etc.
 7) As hibernate is set of objects we need not to learn sql languages .we treat table as object.
8) Basic sql queries are generated by hibernate.
9) We need not do query tuning in case of hibernate.
10) Development and maintenance is very easy because we need not to write queries.



Generator classes
It is used to generate identifier column values. The first is generally called identifier column.
The different generator classes are:-
1)sequence:- The database sequence is automatically generated.
2)Assigned :-get value from application
3)User defined generator class:-
4)UUID :-It uses 128bit UUID algorithm to generate identifiers of type string, unique within a network .
5)GUID:-It is a database generated string on oracle, MySql, Sql server.
6)Identity:-Mysql takes identity, oracle takes sequence.
7)foreign:- used in relationship primary key.
8)hilo:-hilo use hilo algorithm to efficiently generate identifiers of type long, sort, int given in a table and column only for a particular database. 
9)sequence-hilo:-same as hilo algorithm but it is for a given named Database sequence.
10)Native:-It picks identity, sequence or hilo depending upon the capabilities of the underlying database.
*oracle do not support identity, Mysql support .Oracle support sequence
11)Select:- Retrieves primary key assigned by database trigger by selecting the row by some unique key and retrieving the primary key value.
12)Increment:- it increments as sequence.


     Session
1)session.save():- It is used to save an object in the database.
2)session.update():-It is used to update an existing record.
3)session.delete():- It is used to delete an existing record.
4)session.load():-It is used to retrieve a database record in the object representation.
5)session.saveOnUpload :-If there is no record in the database then it will insert the record ,if there is record in the database it will update.
6)session.lock():-we can lock the database record using lock() method.
7)session.evict():-it will change the object from persistent state to detached state. It remove the one object from session.
8)session.flush:- it only update.
9)session.refresh():-it will synchronize database with session.
10)session.clear():-it removes all the objects from the session.
11)session.contains():-if the object is available in the session then it returns true.
12)session.disconnect():-disconnect the session from the current JDBC connection.
13)session.reconnect():- obtains a new JDBC connection.
14)session.isOpen():-checks if the session is still open.
15)transaction.commit():- it both update and commit.
16)session.get():-it is similar to session.load() to retrieve data from database.
If there is no record in the database get() return null where as load() throws Exception.


HQL (Hibernate Query Language)
1)HQL is similar to sql but the difference is we have to give pojo name and property name, instead of table name and column name.
2)HQL queries are database independent.
3)We can execute select, update and delete but not general insert.
Example:- insert into student1 select * from student;
4)If it is HQL directly we can get list of records and the query is database independent.
Example:-
1)update student set student name:=sname, studentAge:=sage where student no:=sno;
2)from:- from student;
3)select s.studentno, s.studentname from student s;
4)where:- from student where studentno >:studentNo;
5)Order by:-from student s where s.studentname:=sname order by s.studentno asc;
6)and – or :- from student s where s.studentid>:sid and/or s.studentage:=sage;
We can use named parameter (:sno) instead of positional parameter(?);


Criteria :-
1)in criteria we never write the query we build the query using some method.
2)all select queries we execute it using criteria and all the non-select queries(update/delete) we execute it using HQL.
3)to build the conditions we use Restrictions or Expression. Expression extends Restriction .
4)all the methods in restrictions class are static methods .All the expression class methods are returning different expression object and all those expression class are implementing criterion interface.
Expression class Methods:-
1)eq-equal
2)ne-not equal
3)like
4)ge-greater than equal
5)gt-greater
6)lt-less than
7)le-less than equal
8)between
9)in
10)isNull
11)isNotNull
12)and
13)or
14)idEq:-it take id column property automatically
15)ilike:-case-insensitive
Example:-
1)Criterian crit= Expression.ne(“studentNo”,new long(1));
2)Criterian crit= Expression.gt(“studentNo”,new long(1));
3)Criterian crit= Expression.like(“studentName”,”sandip”);
4)Criterian crit= Expression.between(“studentNo”,new long(5),new long(10));
5)sql query:-select sno,sname from student where sno=? Or sname=?;
Criteria crit=session.createCriteria(student.class);
Criterion crit1=Expression.eq(“studentNo”,new long(1));
Criterion crit2=Expression.eq(“studentName”,”sandip”);
Criterion crit3=Expression.or(crit1,crit2);
Criteria.add(crit3);
List studList=criteria.list();
•	Criteria is interface used to build the query.
•	Criterian is interface used for condition.

--------------------------Program-1----------------------------------------------------------------------------------
Hibernate+servlet program
------------------------------------------------
<html>
<h1><center>Registration Page</center></h1><hr>
<table border=1 align="center">
<tr><td>enter name<td><input type="text" name="t1"></tr>
<tr><td>enter password<td><input type="text" name="t2"></tr>
 <tr><td>enter address<td><input type="text" name="t3"></tr>
<tr><td><td><input type="submit" value="submit"></tr>
</table>
</form>
</body>
</html>

------------------------------------------------------------------------------------------------------------------
POJO class (getter,setter())
--------------------------------------------------------
public class mypojo
{
	String uname,pword,address;
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public String getUname() {
		return uname;
	}
	public void setUname(String uname) {
		this.uname = uname;
	}
	public String getPword() {
		return pword;
	}
	public void setPword(String pword) {
		this.pword = pword;
	}
	
}
----------------------------------------------------------------------------
servlet
---------------------------
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import org.hibernate.*;
import org.hibernate.cfg.*;
import javax.servlet.annotation.*;
@WebServlet("/Login")
public class Login extends HttpServlet
{	
	public void service(HttpServletRequest req,HttpServletResponse res)
			throws ServletException,IOException
	{		
	Transaction tx=null;
	try
		{	res.setContentType("text/html");
			PrintWriter pw=res.getWriter();
			String a=req.getParameter("t1");
			String b=req.getParameter("t2");
			String c=req.getParameter("t3");
			Configuration cfg=new Configuration();<-------------------------------------
			SessionFactory sf=cfg.configure().buildSessionFactory();<-----------------[cfg,hbm]
			Session ss=sf.openSession();
			mypojo pojo=new mypojo();
			pojo.setUname(a);
			pojo.setPword(b);
			pojo.setAddress(c);
			tx=ss.beginTransaction();
			ss.save(pojo);//data will be saved into the database
			tx.commit();
			ss.close();
			res.sendRedirect("success.html");
		}
		catch(Exception ae)
		{	
			tx.rollback();	
			}	
	
	}}

-------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
"-//hibernate/hibernateconfiguration dtd2.0//en"
"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
<session-factory>
<property name="dialect">org.hibernate.dialect.Oracle9Dialect</property>
  <property name="connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
  <property name="connection.username">system</property>
  <property name="connection.password">1234</property>
  <property name="connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
<property name="hibernate.hbm2ddl.auto">update</property>
<property name="show_sql">true</property>
<mapping resource="hansika.hbm.xml"></mapping>
</session-factory>
</hibernate-configuration>
--------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//hibernate/hibernate mapping dtd2.0//en"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
<class name="mypojo" table="login37">
<id name="uname" column="uname" type="string">
<generator class ="assigned"></generator></id>
<property name="pword" type="string" column="pword" />
<property name="address" type="string" />
</class>
</hibernate-mapping>
-------------------------------------------------------------------------------------------------------
 