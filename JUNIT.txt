JUNIT TESTING
---------------------------------
It is known as functional testing.
we have 2 parts
1)actual output
2)Excepted output
example:- assertEquals(25,add(12,13));
If both are equal then it displays green signal otherwise  brown signal.
green signal means test is pass other wise test fail.
---------------------------------------------------------------------------------------------------------
Maven is a tool.It provides the supporting jar files.
example:-for jdbc,servlet we are adding jar files.
it was esay because it was single jar file. Commking to spring framework we have 25 to 30 jar files.
so it will be difficult to search and add the jar files.
If the sprng version changes then we have to search again for the same version which are compactible for that version.So it is a difficult job.
In that case if we use maven we have to only specify the spring version .Maven will only download the jar files of the compactable verison.
--------------------------------------------------------------------------
step 1:-file --->new ---->maven project
step 2:-Create simple project
step 3:-groupid :- org.sandip (package name)
step 4:-artifactId :- MavenProjectDemo
-------------------------------------------------------------
folder structure
-----------------
1)src/main/java
2)src/main/resources---supporting files
3)src/test/java
4)src/test/resources---supporting files
-------------------------------------------------------------------------------------------------------
google :- maven dependency for junit 4
------------------------------------------------------------------------------
pom.xml
-----------------
<dependencies>
  <!-- https://mvnrepository.com/artifact/junit/junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.12</version>
    <scope>test</scope>
</dependency>
  </dependencies>
------------------------------------------------------------------------------
Example-1
-----------------------------
src/main/java
----------------------------------------------
public class Calculator 
{
public int square(int i)
{
	return i*i;
	}
public int add(int i,int j)
{
	return i+j;
	}
public int sub(int i,int j)
{
	return i-j;
	}
public int mul(int i,int j)
{
	return i*j;
	}
public int div(int i,int j)
{
	return i/j;
	}
public String user(String name)
{
	return "sandip";
}
public String concat(String string1,String string2)
{
return string1+string2;
}}
----------------------------------------
import static org.junit.Assert.*;
import org.junit.Test;
public class CalculatorTest 
{
Calculator ob=new Calculator();
@Test
public void testSquare()
{
	assertEquals(49,ob.square(7));
	assertEquals(36,ob.square(6));
}
@Test
public void TestOpt()
{
	assertEquals(25,ob.add(12,13));
	assertEquals(8,ob.sub(12,4));
	assertEquals(24,ob.mul(12,2));
	assertEquals(3,ob.div(12,4));
}
@Test
public void testUser()
{
	assertEquals("sandip",ob.user("sandip"));
}

@Test
public void testString()
{
	String result=ob.concat("Hello", "Students");
}
@Test
public void compareString()
{
	String s1="Hello";
	String s2="Hello";
	assertSame(s1,s2);
	
}
}
-------------------------------------------------------------------------------------------
Example-2
--------------------------
package org.sandip;
import static org.junit.Assert.*;
import org.junit.Test;
public class Test1 
{
	@Test
	public void testString()
	{
		String str1=new String("apple");//new memory block will be created
		String str2=new String("apple");//new memory block will be created
		String str3=null;
		String str4="apple";
		String str5="apple";//new memory block will not be created
		int val1=5;
		int val2=6;
		String[] expectedArray = {"one","two","three"};
		String[] resultArray = {"one","two","three"};
		
		//to check two objects are equal
		assertEquals(str1,str2);
		//to check two values is true
				assertTrue(val1< val2);
		//to check two values is true
				assertFalse(val1> val2);
		//to check an object is null
				assertNull(str3);
		//to check an object is not null
				assertNotNull(str1);
		//to check if the 2 objects refence point to the same object
		assertSame(str4,str5);
		//to check if the 2 objects refence point to the same object
				assertNotSame(str1,str5);
		//to check if the 2 arrays are equal to each other
				assertArrayEquals(expectedArray,resultArray);
	}
}

----------------------------------------------------------------------------
@BeforeClass ---This will execute for one time before the tests

@Before ---This will execute before each test
@Test 
@After---This will execute after each test

@Before ---This will execute before each test
@Test 
@After---This will execute after each test

@AfterClass ---This will execute for one time after the tests

-----------------------------------------------------------------------
example-3
---------------------
import static org.junit.Assert.assertEquals;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
public class Test3 
{
Calculator ob=new Calculator();
@BeforeClass
public static void beforeclassSetup()throws Exception
{
	System.out.println("Before Class");
}
@Before
public void beforeTestSetup()
{
	System.out.println("Before Test");
}
@Test
public void subTest()
{
	assertEquals(10,ob.sub(16, 6));
}

@Test
public void addTest()
{
	assertEquals(16,ob.add(16, 6));
}

@After
public void afterTestSetup()
{
	System.out.println("After Test");
}

@AfterClass
public static void afterclassSetup()throws Exception
{
	System.out.println("After Class");
}
}
------------------------------------------------------------------------------------------------------







 