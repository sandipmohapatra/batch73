			SPRING
------------------------------------------------------------------------------------------
Spring Framework was developed by Rod Johnson in 2003. Spring framework makes the easy development of JavaEE application.

Spring is a lightweight framework. It is a framework of frameworks because it provides support to various frameworks such as Struts, Hibernate,  EJB, JSF etc. 
The Spring framework comprises several modules such as IOC, AOP, DAO, ORM, WEB MVC etc.

Example:- of Lightweight and Heavy weight
1)awt is heavy weight as it depend on OS
2)swing is light weight as it only depend on JDK
3)EJB is heavy weight as it depends on application server.
4)spring is light weight as it depends on spring jar files + JDK
Spring is build on 2 principles 1)Runtime Polymorphism (function over-ridding)2)Has-A relationship
Spring says instead of Inheritance use Has-A relationship. 

function overloading 
-----------------------------------
int sum(int a,int b)
float sum(float a,float b);

Advantages of Spring Framework
There are many advantages of Spring Framework. They are as follows:

1) Predefined Templates

Spring framework provides templates for JDBC, Hibernate, JPA etc. technologies. So there is no need to write too much code. It hides the basic steps of these technologies.
 example of JdbcTemplate, you don't need to write the code for exception handling, creating connection, creating statement, committing transaction, closing connection etc. You need to write the code of executing query only. Thus, it save a lot of JDBC code.
________________________________________
2) Loose Coupling
The Spring applications are loosely coupled because of dependency injection.
________________________________________
3) Easy to test
The Dependency Injection makes easier to test the application. The EJB or Struts application require server to run the application but Spring framework doesn't require server.
________________________________________
4) Lightweight
Spring framework is lightweight because of its POJO(plain old java object) implementation. The Spring Framework doesn't force the programmer to inherit any class. 
________________________________________
5) Fast Development
The Dependency Injection feature of Spring Framework and it support to various frameworks makes the easy development of JavaEE application.
________________________________________



Spring IOC:-
-----------------------------------------------------
We have 3 container -
core-(BeanFactory)-Interface and implement class is (XMLBeanFactory) 
J2EE-(ApplicationContext)-Interface and implement class is (ClassPathXmlApplicationContext)
MVC-(WebApplicationContext)-Interface and implement class is WebApplicationContextUtil

Work of container :-
-----------------------------------
1)Read web.xml
2)create Instances
3)manage life cycle methods

Dependency Injection
----------------------------------
passing data to a class at runtime.
They are 2 types :- 1)setter methods 2)parameterized Constructor


For spring program we have 3 files to be created minimum.
1)pojo class
2)xml files
3)Driver class :- main method class in spring.

------------------------------
example 1:-
---------------------- 
1)pojo class :- 
Test.java
------------
class Test
{
public void hello()
{
S.O.P("hello world");
}
}
---------------------------------------
2)spring.xml
dtd/xsd
<beans>
<bean class="Test" id="obj">
</bean>
</beans>
------------------------------------
3)client.java
class client
{
public static void main(String args[])
{
//read the .xml file from the given path
Resource r=new classpathResource("spring.xml");
BeanFactory factory=new XmlBeanFactory(r);
Test t1=(Test)factory.getBean("obj");
t1.hello();
}}
----------------------------------------------------------------
Example 2:- setter Injection
-------------------------
Test.java
------------
class Test
{
private String name;
public void setName(String name)  <---setter method
{
this.name=name;
}
public void hello()
{
System.out.println("Hello: "+name); 
}
}
---------------------------------------
2)spring.xml
dtd/xsd
<beans>
<bean class="Test" id="t">
<property name="name" value="ABC"/>
or
<property name="name">
<value>ABC</value>
</property>
</bean>
</beans>
------------------------------------
3)client.java
class client
{
public static void main(String args[])
{
//read the .xml file from the given path
Resource r=new classpathResource("spring.xml");
BeanFactory factory=new XmlBeanFactory(r);
Test t=(Test)factory.getBean("t");
t.hello();
}}

https://github.com/sandipmohapatra/accelya


----------------------------------------------------------------
Example 3:- setter Injection(List/Set/Map)
-------------------------
Test.java
------------
class Test
{
List fruits;
Set Cricketers;
Map Countrycap; 
getter/setter
}
---------------------------------------
2)spring.xml
dtd/xsd
<beans>
<bean class="Test" id="t">
<property name="fruit">
<list>
<value>apple</value>
 <value>orange</value>
 <value>grapes</value>
</list>
</property>

<property name="criketer">
<Set>
<value>xyz</value>
 <value>pqr</value>
 <value>abc</value>
</Set>
</property>

<property name="countrycap">
<Map>
<entry key="India" value="delhi">
<entry key="Pakistan" value="XYZ">
<entry key="Japan" value="PQR">
</Map>
</property>
</bean>
<beans>
------------------------------------
//setter-injection with ref
-----------------------------------------------
class Car
{
private Engine engine;
private String carname;
//setter
public void putCarout()
{
s.o.p("carname "+carname);
s.o.p("Modelname "+engine.getModelname());
}}

----------------------------------------
class Engine
{
private String modelname;
//setter
//getter
}

-----------------------------------------
engine.xml
-----------------------
<beans>
<bean id="e" class="Engine">
<property name="modelname" value="2016">
</bean>
</beans>
-----------------------------------------
car.xml
-----------------------
<beans>
<bean id="c" class="Car">
<property name="Carname" value="Audi"/>
<property name="Engine" ref="e"/>
</bean>
</beans>
-------------------------------------------
constructor-Injection
--------------------------------
Test.java
------------------
class Test
{
private String name;
int age;
Test(String name)
{
this.name=name;
}
Test(int age)
{
this.age=age;
}
Test(String name,int age)
{
this.name=name;
this.age=age;
}
 public void printHello()
{
s.o.p("hello"+name+age);
}}
-------------------------------------------------
spring.xml
---------------------------
<beans>
<bean id="t" class="test">
<constructor-arg value="123">
or
<value>abc</value>
</contructor-arg>
</bean>
</beans>
-----------------------------------
<beans>
<bean id="t" class="test">
<constructor-arg value="23" type="int">
</contructor-arg>
</bean>
</beans>
---------------------------------------------
<beans>
<bean id="t" class="test">
<constructor-arg value="23" type="int">
<constructor-arg value="abc" type="String">
</contructor-arg>
</bean>
</beans>
----------------------------------------------------------
create a class student
enter rollno,name,address,email,phone no
pass the values using constructor injection.
----------------------------------------------------------------------
 
















